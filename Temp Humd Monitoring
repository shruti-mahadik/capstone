		//--- Temperature and Humidity Sensor Test #1 ---
/*----------------------------------------------------------------------------------------------
	File Name:	Temp_Hmd_Sensor_Test_1.c
	Author:		RSparling, JMichael, Smahadik
	Date:		01/03/2020
	Modified:	None
	copyright Fanshawe College, 2020

	Description: 	Testing of the DHT22 temperature and humidity sensor readings, and the 
					ability to send the data wirelessly to a TCP server.	
	
----------------------------------------------------------------------------------------------*/

// Preprocessor ------------------------------------------------------------------------------

#include "pragmas.h"
#include <stdlib.h>
#include <delays.h>
#include <stdio.h>
#include <p18f45k22.h>
#include "usart.h"
#include <string.h>


// Constants ---------------------------------------------------------------------------------

#define TRUE		1		
#define	FALSE		0	


// Sensor Data Control
#define SENSORDATA 		PORTDbits.RD0
#define SENSORSTATE 	TRISDbits.RD0
#define INPUT			1
#define OUTPUT			0
#define MAXDATA			32		                          // Bits in a long variable
#define MAXCS			8		                              // Checksum of DHT is a char
#define LIMIT			104		                            // With 16 MHz Fosc, 104 Tcy = 26 us

#define RCFLAG		PIR1bits.RC1IF	                  // High when a byte is ready to be received

#define ESPBUF 		50				                        // Buffer size for received string

const char SSID[] =			"MyESP";
const char PASSWORD[] =		"NotYours";
const char SERVERIP[] =		"192.168.4.2";
const char SERVERPORT[] =	"2005";

#define DEG 176	                                    // Degree symbol

// Global Variables --------------------------------------------------------------------------

long sensorData = 0;					                      // ***Variables for sensor data
int humd = 0, temp = 0;
char sensorStatement[ESPBUF];

	
// Functions ---------------------------------------------------------------------------------


/*** setFOsc: ******************************************************
Author:		SMAHADIK,JMICHAEL
Date:		24 Jan, 2020		
Modified:	None
Desc:		Sets the internal Oscillator of the Pic 18F45K22 to 16 MHz.
Input: 		None
Returns:	None
**********************************************************************************/
void setFOsc(void)
{
	OSCCON =  			0x72;			// Sleep on slp cmd, HFINT 16 MHz, INT OSC Blk 		
	OSCCON2 = 			0x04;			// PLL No, CLK from OSC, MF off, Sec OSC off, Pri OSC 	
	OSCTUNE = 			0x80;			// PLL disabled, Default factory freq tuning 	
	
	while (OSCCONbits.HFIOFS != 1); 	// wait for osc to become stable
}
//eo: setFOsc:: ***************************************************


/*** portConfig: ******************************************************
Author:		SMAHADIK,JMICHAEL
Date:		26 Jan, 2020		
Modified:	None
Desc:		Configures the port for DHT22 sensor.
Input: 		None
Returns:	None
**********************************************************************************/
void portConfig(void)
{
	// PortD: DHT22 sensor on RD0 (input)
	ANSELD=0x00;	
	LATD=0x01;
	TRISD=0x01;

	// PortC: Set up for serial connection (RC7 is input)
	ANSELC=0x00;	
	LATC=0x00;
	TRISC=0x80;
}  
//eo portConfig:: **********************************************************************


/*** serialCom: ***********************************************************
Author:		SMAHADIK,JMICHAEL
Date:		24 Jan, 2020
Modified:	None
Desc:		Configures RS232 Connection to 19200 Baud rate, asynchronous
Input: 		None
Returns:	None
**********************************************************************************/
void serialCom(void)
{
	SPBRG1 = 	51;		// Fosc = 16 MHz, 19200 Baud Rate (BRGH = 1, BRG16 = 0)

	RCSTA1 = 	0x90;	// Serial port enabled, 8 bit reception, Receiver enabled

	TXSTA1 = 	0x24;	// 8 bit transmission, Transmit enabled, Asynchronous mode, 
						// Sync Break transmission completed, High Boad Rate speed, TSR Empty

	BAUDCON1 = 	0x40;	// No auto-boad timer overflow, receiver is idle, data is not inverted, 
						// High transmit idle state, no 16-bit Baud Rate generator, receiver 
						//operating normally, auto-baud detect is disabled
	
}	
// eo serialCom::**********************************************************


/*** initializeSystem: ***********************************************************
Author:		SMAHADIK,JMICHAEL
Date:		24 Jan, 2020
Modified:	None
Desc:		Initialize PIC, including Fosc, serial connection, and sensor IO.
Input: 		None
Returns:	None
**********************************************************************************/
void initializeSystem(void)
{
	
									
	setFOsc();			// Set the processor speed (4 MHz)

	portConfig();		// Port IO

	serialCom();		// Set up serial connection

	T0CON = 0x90;		// Initialize timer0

}	
// eo initializeSystem::**********************************************************


/*** espGetCh: ***********************************************************
Author:		RSparling
Date:		26 Feb, 2020
Modified:	None
Desc:		Collects and returns character from RCReg1
Input: 		None
Returns:	None
**********************************************************************************/
char espGetCh(void)
{
	char hold = 0;							
	while(!RCFLAG);
	hold = RCREG1;		// Return byte from RC register
	return hold;
}	
// eo espGetCh::**********************************************************


/*** espCheckOK: ***********************************************************
Author:		RSparling
Date:		27 Feb, 2020
Modified:	None
Desc:		Look for "OK" response from ESP wifi, meaning command has been 
			accepted and completed.
Input: 		None
Returns:	None
**********************************************************************************/
void espCheckOK(void)
{	
	char notDone = TRUE;
	while(notDone)
	{
		if(espGetCh() == 'O')
		{
			if(espGetCh() == 'K')	// If 'O' and 'K' are received in succession
			{						// ESP has accepted and acted on the command
				notDone = FALSE;
			}
		}
	}
}	
// eo espCheckOK::**********************************************************


/*** espInitialize: ***********************************************************
Author:		RSparling
Date:		29 Feb, 2020
Modified:	None
Desc:		Initialize the ESP8266, ensure it is ready to receive data.
Input: 		None
Returns:	None
**********************************************************************************/
void espInitialize(void)
{
	printf("AT\r\n");
	espCheckOK();	
}	
// eo espInitialize::**********************************************************


/*** espSend: ***********************************************************
Author:		RSparling
Date:		29 Feb, 2020
Modified:	None
Desc:		Send a string to ESP
Input: 		String to be sent to ESP,
			Length of the string
Returns:	None
**********************************************************************************/
void espSend(char *ptr, int len)
{	
	char notDone = TRUE;
	char index = 0;

	printf("AT+CIPSEND=%i\r\n",len);	// Initialize ESP data sending procedure	
	while(notDone)
	{
		if(espGetCh() == '>')					// Wait for '>', meaning ESP is 
		{										// ready for string to be sent
			notDone = FALSE;
		}
	}
	for(index = 0; index < len; index++)	// Send string
	{
		printf("%c",*ptr);
		ptr++;		
	}
	espCheckOK();
}	
// eo espSend::**********************************************************


/*** espReceive: ***********************************************************
Author:		RSparling
Date:		29 Feb, 2020
Modified:	None
Desc:		Receive a string from ESP
Input: 		Location that the string will be saved to
Returns:	None
**********************************************************************************/
void espReceive(char *ptr)
{	
	char strRdy = FALSE;
	char lengthRdy = FALSE;
	char strLengthChar[4];
	char lengthIndex = 0;
	int strLengthInt;
	char strIndex = 0;	

	while(!strRdy)
	{
		if(espGetCh() == ',')	// String length data comes after "+IPD,", read after ','
		{
			while(!lengthRdy)
			{
				strLengthChar[lengthIndex] = espGetCh();
				if(strLengthChar[lengthIndex] == ':')		// String length ends at ':'
				{
					strLengthChar[lengthIndex] = 0;			// End string
					strLengthInt = atoi(strLengthChar);		// Convert to integer
					lengthRdy = TRUE;
				}
				lengthIndex++;
			}
					
			for (strIndex = 0; strIndex < strLengthInt; strIndex++)	// Place received 
			{														// character string into memory
				*ptr = espGetCh();
				ptr++;
			}
			*ptr = 0;					// End with null to finish string
			strRdy = TRUE;
		}
	}
}	
// eo espReceive::**********************************************************


/*** startSignal: ******************************************************
Author:		CTalbot
Date:		26 Jan, 2020		
Modified:	JMichael, SMahadik
Desc:		Program that sends a start signal from dht22 and initiates sensor.
Input: 		None
Returns:	None
**********************************************************************************/
void startSignal()	// *** modified
{
	SENSORSTATE = OUTPUT;			//making sensor as output device
	SENSORDATA = FALSE;				//sinking dataline to low
	Delay1KTCYx(4);					// Delays for 1ms to start a read process
	SENSORDATA = TRUE;				//sinking dataline to high
	Delay10TCYx(16);				// Delay for 40 us
	//***DHT22 should take over at this point
	SENSORDATA = FALSE;
	SENSORSTATE = INPUT;			//DHT22 configured as input device 
	// End of start sequence
	// DHT22 should take over at this point and pull the line.
	while( !SENSORDATA );
	while( SENSORDATA );
	
} 
//eo startSignal:: *********************************************************


/*** checkResponse: ******************************************************
Author:		CTalbot
Date:		26 Jan, 2020		
Modified:	JMichael, SMahadik
Desc:		Program that checks for a response from dht22 sensor and stores temperature & humidity values.
Input: 		None
Returns:	None
**********************************************************************************/
void checkResponse()
{
	int index = 0;
	long data = 0;
	char checksum = 0;

	for( index=0; index< MAXDATA; index++)
	{
	
		while( !SENSORDATA );	// Reads time that sensor responds low, then high
		TMR0H=0;
		TMR0L=0;
		while( SENSORDATA );
		
		if( TMR0L > LIMIT )			// If time is higher than specified time, bit is 1.
		{
			data = (data<<1) + 1;
		}
		else if( TMR0L < LIMIT )	// If lower, bit is 0
		{
			data = (data<<1);
		}
	}
	for( index=0; index< MAXCS; index++)	// Same process for checksum
	{
	
		
		while( SENSORDATA );
		TMR0H=0;	
		TMR0L=0;
		while( !SENSORDATA );
		
		if( TMR0L > LIMIT )
		{
			checksum = (checksum<<1)+ 1;
		}
		else if( TMR0L < LIMIT )
		{
			checksum = (checksum<<1);
		}
	}
	temp = data;			// First byte of long is temperature
	humd = (data>>16) ;		// Second byte is humidity

	Nop();
	SENSORSTATE = OUTPUT;	// Reset IO pin for next time around
	SENSORDATA = TRUE;

	Nop();
}
// eo checkResponse:: ******************************************************



/*--- MAIN FUNCTION -------------------------------------------------------------------------
-------------------------------------------------------------------------------------------*/

void main(void)
{
	char greeting[] = "Ready to send data.\r\n";
	initializeSystem();	// Initialize PIC and connection with ESP8266 Wifi Module
	espInitialize();

	// Connect to access point
	printf("AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,PASSWORD);
	espCheckOK();	
		
	// Connect to TCP Server
	printf("AT+CIPSTART=\"TCP\",\"%s\",%s\r\n",SERVERIP,SERVERPORT);
	espCheckOK();

	espSend(greeting,strlen(greeting));

	while(TRUE)
	{
		startSignal();
		checkResponse();	// Get sensor reading

		sprintf(sensorStatement,"Humidity Reading: %i.%i%%\n\rTemperature Reading: %i.%i%cC\n\n\r",humd/10,humd%10,temp/10,temp%10,DEG);
		espSend(sensorStatement,strlen(sensorStatement));
		Delay10KTCYx(1000);	// Give some time before repeating
	}// eo while
// eo main	
}
